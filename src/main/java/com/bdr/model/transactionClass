public class Transaction {
	public String transactionTime;
	private String transactionID;
	private String transactionDate;
	private double transactionAmount;
	private String transactionType;
	
	
	public Transaction(String transactionTime, String transactionID, String transactionDate, String transactionType, double transactionAmount) {
	this.transactionTime = transactionTime;
        this.transactionID = transactionID;
        this.transactionDate = transactionDate;
        this.transactionAmount = transactionAmount;
        this.transactionType = transactionType;
 
    }
    
    public String getTransactionTime() {
        return transactionTime;
    }

    public String getTransactionID() {
        return transactionID;
    }

    public String getTransactionDate() {
    	return transactionDate;
    }
    
    public double getTransactionAmount() {
        return transactionAmount;
    }
    
    public String getTransactionType() {
        return transactionType;
    }


}

public void updateTransaction(String transactionTime, String transactionDate, String transactionType, double transactionAmount) {
    if ((transactionTime.length == 0) || (transactionDate.length == 0))
    {
    	System.out.println("Unvalid transaction.");
    	break;
    }
    else {   	
	    this.transactionTime = transactionTime;
	    this.transactionDate = transactionDate;
	    this.transactionType = transactionType;
	    this.transactionAmount = transactionAmount;
    }
}

public Transaction createTransaction(String transactionTime, String transactionID, String transactionDate, String transactionType, double transactionAmount) {
    Transaction newTransaction = new Transaction(transactionTime, transactionID, transactionDate, transactionType, transactionAmount);
}

public boolean deleteTransaction(String transactionID) {
    try {
        boolean isDeleted = deleteTransactionById(transactionID);
        
        if (!isDeleted) {
            System.out.println("Transaction ID not found.");
        }       
        return isDeleted; 
    } catch (Exception e) {
        System.out.println("Error occurred while deleting transaction: " + e.getMessage());
        return false; 
    }
}

private boolean deleteTransactionById(String transactionID) {
	for (Transaction transaction: transactions) {
		if (transaction.getTransactionID().equals(transactionID)) {
			transactions.remove(transaction);
			return true;
		}
	}
    return false;
}

public boolean transactionSuccess() {
	if ((transactionID > 0) & (transactionAmount > 0)){
		System.out.println("Transaction is a success.");
		return true;
	}
	else {
		System.out.println("Transaction failed.");
		return false;
	}
}

public double dailyTotalAmount(String targetDate) {
	double totalAmount = 0.0;
	
	for (Transaction transaction : transactions) {
	         if (transaction.getTransactionDate().equals(targetDate)) {
	             totalAmount += transaction.getTransactionAmount();
	         }
     }
	 return totalAmount;
}

